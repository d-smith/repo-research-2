stormdata <- read.csv('./repdata-data-StormData.csv.bz2')


First we see there evtype levels have a lot more values than the permitted 48 values 
noted in the documentation: https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2Fpd01016005curr.pdf

summary(levels(stormdata$EVTYPE))


Some of the overlap may be due to differences in case. We can try normalizing the values on case:

stormdata$EVTYPE <- toupper(stormdata$EVTYPE)

This changes EVTYPE from a factor to character

We see that there are still more values than the permitted 48:

length(unique(stormdata$EVTYPE))

A lot of it is just a mess - cleaning this up is well beyond the scope of this assignment.

One simple way to proceed is to just drop everything that is not a permitted event type. We can do this by joining
the storm data against the permitted events. First, we'll extract the columns we need for the rest of the analysis.

library('dplr')
sd <- select(stormdata,BGN_DATE, EVTYPE,FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)

officialCats <- structure(
  list(
    EventName = structure(
      c(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 17L, 
        18L, 16L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L,
        31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 
        45L, 46L, 47L, 48L), 
      .Label = c("Astronomical Low Tide", "Avalanche", "Blizzard", 
                 "Coastal Flood", "Cold/Wind Chill", "Debris Flow", 
                 "Dense Fog", "Dense Smoke", "Drought", "Dust Devil", 
                 "Dust Storm", "Excessive Heat", "Extreme Cold/Wind Chill", 
                 "Flash Flood", "Flood", "Freezing Fog", "Frost/Freeze", 
                 "Funnel Cloud", "Hail", "Heat", "Heavy Rain", "Heavy Snow", 
                 "High Surf", "High Wind", "Hurricane (Typhoon)", "Ice Storm", 
                 "Lake-Effect Snow", "Lakeshore Flood", "Lightning", 
                 "Marine Hail", "Marine High Wind", "Marine Strong Wind", 
                 "Marine Thunderstorm Wind", "Rip Current", "Seiche", "Sleet", 
                 "Storm Surge/Tide", "Strong Wind", "Thunderstorm Wind", 
                 "Tornado", "Tropical Depression", "Tropical Storm", "Tsunami", 
                 "Volcanic Ash", "Waterspout", "Wildfire", "Winter Storm", 
                 "Winter Weather"),
      class = "factor"), 
    Designator = structure(
      c(3L, 3L, 3L, 3L, 3L, 1L, 3L, 3L, 3L, 1L, 3L, 3L, 3L, 1L, 1L, 3L, 1L, 3L, 
        1L, 3L, 1L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 
        3L, 3L, 1L, 1L, 3L, 3L, 3L, 3L, 2L, 3L, 3L, 3L), 
      .Label = c("C", "M", "Z"), 
      class = "factor")
    ), 
  .Names = c("EventName", "Designator"), 
  class = "data.frame", 
  row.names = c(NA, -48L)
  )

officialCats$EventName <- toUpper(officialCats$EventName)

officialStormData <- inner_join(stormData, officialCats, c('EVTYPE' = 'EventName'))

psd <- inner_join(sd,officialCats,c('EVTYPE' = 'EventName'))

Now we have 46 unique levels.

length(unique(psd$EVTYPE))

Next, we need to combine the damage and damage exponent columns to calculate the total damage. First step is to map
exp levels to a number:

multiplier <- function(exp) {
  # default to 1 for things that don't make sense, e.g. -,?,+, etc
  m <- 1
  if(exp == "0") {
    m <- 0
  } else if (exp == "2") {
    m <- 2
  } else if (exp == "3") {
    m <- 3
  } else if (exp == "4") {
    m <- 4
  } else if (exp == "5") {
    m <- 5
  } else if (exp == "6") {
    m <- 6
  } else if (exp == "7") {
    m <- 7
  } else if (exp == "8") {
    m <- 8
  } else if (exp == "B") {
    m <- 1000000000
  } else if(exp == "h" || exp == "H") {
    m <- 100
  } else if(exp == "K") {
    m <- 1000 
  } else if(exp == "m" || exp == "M") {
    m <- 1000000
  }
  
  m
  
}

Now we can add some multiplier columns:


psd$PDMULT <- sapply(psd$PROPDMGEXP, multiplier)
psd$CDMULT <- sapply(psd$CROPDMGEXP, multiplier)

Now we calculate damage totals.
psd$PDTOTAL <- psd$PDMULT * psd$PROPDMG
psd$CDTOTAL <- psd$CDMULT * psd$CROPDMG



by_evtype <- group_by(psd, EVTYPE)

hd <- summarise(by_evtype, HUMANDMG = sum(FATALITIES) + sum(INJURIES))
hd <- arrange(hd, desc(HUMANDMG))



td <- filter(psd,EVTYPE=="TORNADO")
td$year <- year(mdy_hms(as.character(td$BGN_DATE)))
td_by_year <- group_by(td,year)
td_year_summary <- summarize(td_by_year, count=sum(FATALITIES) + sum(INJURIES))
library('ggplot2')
ggplot(td_year_summary,aes(year,count)) + geom_smooth()

psd$year <- year(mdy_hms(as.character(psd$BGN_DATE)))
psd_by_year <- group_by(psd,year)
psd_year_summary <- summarize(psd_by_year, count=sum(FATALITIES) + sum(INJURIES))
library('ggplot2')
ggplot(psd_year_summary,aes(year,count)) + geom_smooth()

f <- summarize(psd_by_year, count=n(), hdamage=mean(FATALITIES) + mean(INJURIES),
pdamage = mean(PDTOTAL))

ggplot(f, aes(pdamage, hdamage)) +
  geom_point(aes(size = count), alpha = 1/2) +
  geom_smooth() +
  scale_size_area()

f <- summarize(psd_by_year,  hdamage=sum(FATALITIES) + sum(INJURIES),
pdamage = sum(PDTOTAL), cdamage=sum(CDTOTAL))


ggplot(f, aes(year,hdamage)) + geom_smooth()
ggplot(f, aes(year,pdamage)) + geom_smooth()
ggplot(f, aes(year,cdamage)) + geom_smooth()


